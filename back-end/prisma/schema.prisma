// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Learn more about prisma middlewares

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                    @id @default(cuid())
  email                     String?                   @unique
  password                  String?
  firstName                 String?
  lastName                  String?
  hasFinishedSettingUp      Boolean                   @default(false)
  avatarUrl                 String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @default(now()) @updatedAt
  dateOfBirth               DateTime?
  gender                    String?
  region                    String?
  regionalRanking           Int?                      @default(0)
  occupation                String?
  ranking                   Int?                      @default(0)
  cash                      Float?                    @default(100000)
  totalPortfolio            Float?                    @default(100000)
  totalPortfolioLastClosure Float?                    @default(100000)
  watchlist                 String[]
  transactions              UserTransaction[]
  shares                    Share[]
  accountSummaryChartInfo   AccountSummaryTimestamp[]
  rankingChartInfo          RankingTimestamp[]
  companiesRatings          CompanyRating[]
}

model AccountSummaryTimestamp {
  id             String @id @default(cuid())
  UTCDateString  String
  UTCDateKey     String
  year           Int
  portfolioValue Float
  user           User   @relation(fields: [userID], references: [id])
  userID         String

  @@unique([UTCDateKey, userID])
}

model RankingTimestamp {
  id              String @id @default(cuid())
  UTCDateString   String
  UTCDateKey      String
  year            Int
  ranking         Int
  regionalRanking Int
  user            User   @relation(fields: [userID], references: [id])
  userID          String

  @@unique([UTCDateKey, userID])
}

model Share {
  id          String   @id @default(cuid())
  companyCode String?
  quantity    Int?
  buyPriceAvg Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userID], references: [id])
  userID      String
}

model UserTransaction {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  companyCode        String?
  quantity           Int?
  priceAtTransaction Float? // price at the moment transactions are made
  limitPrice         Float?
  brokerage          Float?
  spendOrGain        Float? // totalValue = priceAtTransaction * quantity + (buy) or - (sell) brokerage; if buy: totalValue should be calculated then cast to negative 
  isFinished         Boolean?
  finishedTime       DateTime?
  isTypeBuy          Boolean?
  note               String?
  user               User      @relation(fields: [userID], references: [id])
  userID             String
}

model MarketHolidays {
  id                    String  @id @default(cuid())
  year                  Int?    @unique
  newYearsDay           String?
  martinLutherKingJrDay String?
  washingtonBirthday    String?
  goodFriday            String?
  memorialDay           String?
  independenceDay       String?
  laborDay              String?
  thanksgivingDay       String?
  christmas             String?
}

model UserVerification {
  id        String  @id @default(cuid())
  email     String?
  password  String?
  expiredAt String? //handle specially -> don't need to use DateTime type
}

model CompanyRating {
  id                             String @id @default(cuid())
  symbol                         String
  date                           String
  rating                         String
  ratingScore                    Int
  ratingRecommendation           String
  ratingDetailsDCFScore          Int
  ratingDetailsDCFRecommendation String
  ratingDetailsROEScore          Int
  ratingDetailsROERecommendation String
  ratingDetailsROAScore          Int
  ratingDetailsROARecommendation String
  ratingDetailsDEScore           Int
  ratingDetailsDERecommendation  String
  ratingDetailsPEScore           Int
  ratingDetailsPERecommendation  String
  ratingDetailsPBScore           Int
  ratingDetailsPBRecommendation  String
  user                           User   @relation(fields: [userID], references: [id])
  userID                         String
}
